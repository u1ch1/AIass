#!/usr/bin/env python3
import os
import sys
import requests
import subprocess
import time
import readline
from datetime import datetime

class KaliChatAssistant:
    def __init__(self):
        self.workspace = f"{os.path.expanduser('~')}/kali_chat_workspace"
        os.makedirs(self.workspace, exist_ok=True)
        os.chdir(self.workspace)
        
        self.chat_history = []
        self.setup_ollama()
        
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è AI...")
        
    def setup_ollama(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Ollama"""
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                print("‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve")
        except:
            print("‚ö†Ô∏è  Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –±–∞–∑–æ–≤—ã–º–∏.")
    
    def ask_ai_russian(self, message):
        """–û–±—â–∞–µ–º—Å—è —Å AI –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        prompt = f"""
        –¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Kali Linux. 
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.
        
        –ü—Ä–∞–≤–∏–ª–∞:
        - –û–±—ä—è—Å–Ω—è–π –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        - –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        - –°–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ helpful
        
        –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:
        {self.chat_history[-5:] if self.chat_history else '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏'}
        
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}
        
        –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"""
        
        try:
            payload = {
                "model": "codellama:7b",
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "top_p": 0.9
                }
            }
            
            response = requests.post("http://localhost:11434/api/generate", 
                                   json=payload, timeout=30)
            return response.json()["response"]
            
        except Exception as e:
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    
    def execute_command(self, command):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        dangerous = ["rm -rf", "format", "passwd", "chmod", "dd", "mkfs"]
        if any(cmd in command for cmd in dangerous):
            return "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        
        try:
            result = subprocess.run(command, shell=True, capture_output=True, 
                                  text=True, timeout=120)
            return f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.stdout}\n–û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):\n{result.stderr}"
        except subprocess.TimeoutExpired:
            return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def smart_analysis(self, target):
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏"""
        analysis = f"""
üîç **–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏: {target}**

**–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω:**

1. **–†–∞–∑–≤–µ–¥–∫–∞ —Å–µ—Ç–∏** - —É–∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞ —Ö–æ—Å—Ç
   - `nmap -sn {target}` - –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
   - `ping {target}` - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

2. **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤** - —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ö–æ—Å—Ç–µ
   - `nmap -sV -sC {target}` - –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
   - `nmap -p- {target}` - –≤—Å–µ –ø–æ—Ä—Ç—ã

3. **–í–µ–±-–∞–Ω–∞–ª–∏–∑** (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä)
   - `nikto -h {target}` - –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
   - `dirb http://{target}` - –ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

**–ù–∞—á–Ω–µ–º —Å –±–∞–∑–æ–≤–æ–π —Ä–∞–∑–≤–µ–¥–∫–∏?** (–¥–∞/–Ω–µ—Ç)
"""
        return analysis
    
    def start_chat(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
        print("\n" + "="*60)
        print("ü§ñ Kali AI –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("–Ø –≥–æ–≤–æ—Ä—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ–º–æ–≥—É —Å –ø–µ–Ω—Ç–µ—Å—Ç–æ–º")
        print("–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å")
        print("="*60)
        print("\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("- '–ö–∞–∫ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å?'")
        print("- '–ù–∞–π–¥–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ example.com'") 
        print("- '–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤'")
        print("- '–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é Kali?'")
        print("\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'quit'")
        print("-"*60)
        
        while True:
            try:
                user_input = input("\nüë§ –í—ã: ").strip()
                
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –¥–ª—è –Ω–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.")
                    break
                elif not user_input:
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                self.chat_history.append(f"User: {user_input}")
                
                print("\nü§ñ AI: –î—É–º–∞—é...")
                
                # –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                if any(word in user_input.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', 'hello']):
                    response = "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ Kali Linux. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                
                elif any(word in user_input.lower() for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']):
                    response = """
**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**
- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∏ –ø–æ—Ä—Ç–æ–≤
- –í–µ–±-–∞–Ω–∞–ª–∏–∑ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏  
- –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
- –ê–Ω–∞–ª–∏–∑ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

üìä **–ê–Ω–∞–ª–∏–∑:**
- –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º

üõ†Ô∏è **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ–Ω—Ç–µ—Å—Ç–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

**–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å!**
"""
                elif any(word in user_input.lower() for word in ['—Å–∫–∞–Ω–∏—Ä', 'scan', 'nmap']):
                    # –ò—â–µ–º —Ü–µ–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    target = "example.com"
                    if any(word in user_input for word in ['–ª–æ–∫–∞–ª—å–Ω', 'local', '—Å–µ—Ç—å']):
                        target = "192.168.1.0/24"
                    elif any(word in user_input for word in ['—Å–∞–π—Ç', 'website', 'http']):
                        target = "testphp.vulnweb.com"
                    
                    response = self.smart_analysis(target)
                    
                elif any(word in user_input.lower() for word in ['—Å–æ–∑–¥–∞–π', 'create', '–ø—Ä–æ–µ–∫—Ç']):
                    project_name = f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    os.makedirs(project_name, exist_ok=True)
                    response = f"‚úÖ –°–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç '{project_name}'! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
                
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    response = self.ask_ai_russian(user_input)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                print(f"\nü§ñ AI: {response}")
                self.chat_history.append(f"Assistant: {response}")
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å
                if "`" in response and any(cmd in response for cmd in ["nmap", "nikto", "dirb"]):
                    execute = input("\nüöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã? (–¥–∞/–Ω–µ—Ç): ")
                    if execute.lower() in ['–¥–∞', 'yes', 'y', '–¥']:
                        self.execute_recommended_commands(response)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def execute_recommended_commands(self, ai_response):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ —á—Ç–æ –≤ `backticks`)
        lines = ai_response.split('\n')
        commands = []
        
        for line in lines:
            if '`' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É ` `
                start = line.find('`') + 1
                end = line.find('`', start)
                if start > 0 and end > start:
                    command = line[start:end]
                    if any(cmd in command for cmd in ["nmap", "nikto", "dirb", "gobuster"]):
                        commands.append(command)
        
        if commands:
            print(f"\nüîß –ù–∞—à–µ–ª {len(commands)} –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            for i, cmd in enumerate(commands, 1):
                print(f"{i}. {cmd}")
            
            choice = input("\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã? (–¥–∞/–Ω–µ—Ç/–Ω–æ–º–µ—Ä): ")
            
            if choice.lower() in ['–¥–∞', 'yes', 'y', '–¥', 'all']:
                for cmd in commands:
                    print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
                    result = self.execute_command(cmd)
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    time.sleep(2)
            elif choice.isdigit() and 1 <= int(choice) <= len(commands):
                cmd = commands[int(choice)-1]
                print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
                result = self.execute_command(cmd)
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print("‚ùå –ù–µ –Ω–∞—à–µ–ª –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

def main():
    assistant = KaliChatAssistant()
    assistant.start_chat()

if __name__ == "__main__":
    main()
